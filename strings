#!/usr/bin/env python3

# Find all strings in binary,
# supports UTF-8, UTF-16LE
#
# Dependencies: rabin2 (radare2),
# objdump (binutils)
#####################

import subprocess
import re
import os, sys
import contextlib
import argparse
from operator import itemgetter

MIN_STRINGS_FOUND = 3
MIN_LENGTH = 5
MAX_LENGTH = 300
targeted_sections = ["__ustring", "__cstring"]

parser = argparse.ArgumentParser()
parser.add_argument("file")
parser.add_argument("-u", "--unicode-only", action="store_true")
parser.add_argument("-a", "--ascii-only", action="store_true")
parser.add_argument("-q", "--quiet", action="store_true")
parser.add_argument("-i", "--imhex-output", action="store_true")
try:
    with open(os.devnull, "w") as devnull:
        with contextlib.redirect_stderr(devnull):
            file, unicode_only, ascii_only, quiet, imhex_output = itemgetter(
                "file", "unicode_only", "ascii_only", "quiet", "imhex_output")(
                    parser.parse_known_args()[0].__dict__)
            if unicode_only and ascii_only:
                exit()
except SystemExit:
    exit(f"Usage: {sys.argv[0]} macho_file [-u/--unicode-only] [-a/--ascii-only] [-q/--quiet] [-i/--imhex-output]")

file_type = subprocess.check_output(
    [f"file {file}"],
    shell=True).decode()

is_macho = "Mach-O" in file_type
if not is_macho:
    quiet or print("%-90s\tNot a Mach-O" % file)
    exit()

is_fat = "universal" in file_type
if is_fat:
    subprocess.check_output(
        [f"cd $(dirname {file}) ; rabin2 -x {file.split('/')[-1]} ; cd -"],
        shell=True)
    quiet or print("%-90s\tFat Mach-O binary" % file)
    _file = file
    file = subprocess.check_output(
        [f"find {file}.fat/* | grep 64"],
        shell=True).strip().split(b"\n")[0].decode()

def _escape(s):
    escaped = ""
    for c in s:
        code = ord(c)
        if code <= 31:
            escaped += f"\\x{code:02d}"
        else:
            escaped += c
    return escaped

printbuffer = ""
try:
    _sections = subprocess.check_output(
        [f"objdump --section-headers {file}"],
        shell=True).strip().decode()
    if not any(_ in _sections for _ in targeted_sections):
        quiet or print("%-90s\tNo sections found: %s" % (file, ', '.join(targeted_sections)))
        exit()

    for _section in _sections.split("\n")[4:]:
        [section_id, section_name, _section_length, _section_offset, section_type] =\
            re.split('\s+', _section.strip(), maxsplit=4)
        if section_name not in targeted_sections:
            continue

        with open(file, "rb") as f:
            section_length = int(_section_length, 16)
            if len(_section_offset) > 8:
                # ARM64
                section_offset = int(_section_offset, 16) & 0b11111111111111111111111111111111
                f.seek(section_offset)
                section_data = f.read(section_length)
            else:
                # ARM32
                section_offset = int(_section_offset, 16)
                f.seek(section_offset)
                section_data = f.read(section_length)
                if len(section_data) != section_length:
                    section_offset = section_offset ^ 0b1100000000000000
                    f.seek(section_offset)
                    section_data = f.read(section_length)

        string_offset = 0
        while string_offset < section_length:
            string_length = 0
            try:
                if section_name == "__ustring":
                    while (string_offset + string_length + 2) < section_length:
                        if section_data[string_offset + string_length] == 0 and \
                           section_data[string_offset + string_length + 1] == 0:
                            break
                        string_length += 2
                    string_length += 2
                    encoding = "utf-16"
                else:
                    while (string_offset + string_length) < section_length and \
                        section_data[string_offset + string_length] != 0:
                        string_length += 1
                    if (string_offset + string_length + 1) < section_length and \
                        section_data[string_offset + string_length + 1] == 0:
                        string_length += 2
                        encoding = "utf-16"
                    else:
                        string_length += 1
                        encoding = "utf-8"

                real_length = string_length / 2 if encoding == "utf-16" else string_length
                if real_length < MIN_LENGTH or real_length > MAX_LENGTH:
                    continue
                string = section_data[string_offset:string_offset + string_length]
                decoded_string = string.decode(encoding, errors='ignore')
                ascii = decoded_string.isascii()
                if unicode_only and ascii:
                    continue
                if ascii_only and not ascii:
                    continue

                abs_offset = section_offset + string_offset
                if imhex_output:
                    printbuffer += f"char char_array_{abs_offset:08x}[0x{string_length:04x}] @ 0x{abs_offset:08x};\t// {_escape(decoded_string)}\n"
                else:
                    printbuffer += f"{section_name}:{abs_offset:016x}  {string_length:08x}\t{_escape(decoded_string)}\n"
            finally:
                string_offset += string_length
finally:
    if is_fat:
        subprocess.check_output(
            [f"rm -r {_file}.fat/"],
            shell=True)

    if printbuffer == "" or len(printbuffer.strip().split("\n")) < MIN_STRINGS_FOUND:
        if not quiet:
            print("%-90s\tNo strings found" % file)
    else:
        print(f"\n{file}\n")
        if not imhex_output:
            print("%-26s  %-8s\t%s" % ("Address", "Length", "String"))
        print(printbuffer)